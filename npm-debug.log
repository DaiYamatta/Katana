0 info it worked if it ends with ok
1 verbose cli [ '/Users/shogun/.nvm/v0.8.23/bin/node',
1 verbose cli   '/Users/shogun/.nvm/v0.8.23/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@1.2.18
3 info using node@v0.8.23
4 verbose publish [ '.' ]
5 verbose read json /Users/shogun/Projects/Node/Katana/package.json
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { pathname: '.', path: '.', href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /Users/shogun/.npm/3a52ce78-.lock
11 verbose read json package.json
12 verbose tar pack [ '/var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/tmp.tgz',
12 verbose tar pack   '.' ]
13 verbose tarball /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/tmp.tgz
14 verbose folder .
15 info prepublish katana@0.3.0
16 silly lockFile 3a52ce78- .
17 verbose lock . /Users/shogun/.npm/3a52ce78-.lock
18 silly lockFile 2e379522-7662-0-07901101931929588-tmp-tgz /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/tmp.tgz
19 verbose lock /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/tmp.tgz /Users/shogun/.npm/2e379522-7662-0-07901101931929588-tmp-tgz.lock
20 silly lockFile 3a52ce78- .
21 silly lockFile 3a52ce78- .
22 silly lockFile 2e379522-7662-0-07901101931929588-tmp-tgz /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/tmp.tgz
23 silly lockFile 2e379522-7662-0-07901101931929588-tmp-tgz /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/tmp.tgz
24 verbose tar unpack /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/tmp.tgz
25 silly lockFile 643dc88d-7662-0-07901101931929588-package /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/package
26 verbose lock /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/package /Users/shogun/.npm/643dc88d-7662-0-07901101931929588-package.lock
27 silly lockFile 2e379522-7662-0-07901101931929588-tmp-tgz /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/tmp.tgz
28 verbose lock /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/tmp.tgz /Users/shogun/.npm/2e379522-7662-0-07901101931929588-tmp-tgz.lock
29 silly gunzTarPerm modes [ '755', '644' ]
30 silly gunzTarPerm extractEntry package.json
31 silly gunzTarPerm extractEntry .npmignore
32 silly gunzTarPerm extractEntry modules.json
33 silly gunzTarPerm extractEntry bin/create
34 silly gunzTarPerm extractEntry bin/katana
35 silly gunzTarPerm extractEntry bin/modules
36 silly gunzTarPerm extractEntry katana.jpg
37 silly gunzTarPerm extractEntry lib/bootstrap.js
38 silly gunzTarPerm extractEntry lib/cookie.js
39 silly gunzTarPerm extractEntry lib/katana.js
40 silly gunzTarPerm extractEntry lib/model.js
41 silly gunzTarPerm extractEntry lib/controller.js
42 silly gunzTarPerm extractEntry lib/config.js
43 silly gunzTarPerm extractEntry lib/request.js
44 silly gunzTarPerm extractEntry lib/response.js
45 silly gunzTarPerm extractEntry lib/router.js
46 silly gunzTarPerm extractEntry lib/utils.js
47 silly gunzTarPerm extractEntry lib/consolidate.js
48 silly gunzTarPerm extractEntry lib/static.js
49 silly gunzTarPerm extractEntry lib/module.js
50 silly gunzTarPerm extractEntry lib/view.js
51 silly gunzTarPerm extractEntry lib/multiparser.js
52 silly gunzTarPerm extractEntry lib/store/index.js
53 silly gunzTarPerm extractEntry lib/store/memory.js
54 silly gunzTarPerm extractEntry lib/store/mongodb.js
55 silly gunzTarPerm extractEntry lib/store/mongoose.js
56 silly gunzTarPerm extractEntry lib/store/mysql.js
57 silly gunzTarPerm extractEntry lib/store/pgsql.js
58 silly gunzTarPerm extractEntry lib/store/redis.js
59 silly gunzTarPerm extractEntry lib/session/index.js
60 silly gunzTarPerm extractEntry lib/session/memory.js
61 silly gunzTarPerm extractEntry lib/session/redis.js
62 silly gunzTarPerm extractEntry lib/session/store.js
63 silly gunzTarPerm extractEntry template/app.js
64 silly gunzTarPerm extractEntry template/application/config/development/application.js
65 silly gunzTarPerm extractEntry template/application/config/development/routing.js
66 silly gunzTarPerm extractEntry template/application/config/development/stores.js
67 silly gunzTarPerm extractEntry template/application/controllers/home.js
68 silly gunzTarPerm extractEntry template/application/views/index.html
69 silly gunzTarPerm extractEntry readme.ja.md
70 silly gunzTarPerm extractEntry readme.md
71 silly gunzTarPerm extractEntry todo.md
72 verbose read json /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/package/package.json
73 silly lockFile 643dc88d-7662-0-07901101931929588-package /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/package
74 silly lockFile 643dc88d-7662-0-07901101931929588-package /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/package
75 silly lockFile 2e379522-7662-0-07901101931929588-tmp-tgz /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/tmp.tgz
76 silly lockFile 2e379522-7662-0-07901101931929588-tmp-tgz /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/tmp.tgz
77 verbose from cache /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/package/package.json
78 verbose tar pack [ '/Users/shogun/.npm/katana/0.3.0/package.tgz',
78 verbose tar pack   '/var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/package' ]
79 verbose tarball /Users/shogun/.npm/katana/0.3.0/package.tgz
80 verbose folder /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/package
81 silly lockFile 643dc88d-7662-0-07901101931929588-package /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/package
82 verbose lock /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/package /Users/shogun/.npm/643dc88d-7662-0-07901101931929588-package.lock
83 silly lockFile 87e53d2e-gun-npm-katana-0-3-0-package-tgz /Users/shogun/.npm/katana/0.3.0/package.tgz
84 verbose lock /Users/shogun/.npm/katana/0.3.0/package.tgz /Users/shogun/.npm/87e53d2e-gun-npm-katana-0-3-0-package-tgz.lock
85 silly lockFile 643dc88d-7662-0-07901101931929588-package /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/package
86 silly lockFile 643dc88d-7662-0-07901101931929588-package /var/folders/gl/n0t1ct115nndxjpsflfkzws80000gn/T/npm-1679/1374580127662-0.07901101931929588/package
87 silly lockFile 87e53d2e-gun-npm-katana-0-3-0-package-tgz /Users/shogun/.npm/katana/0.3.0/package.tgz
88 silly lockFile 87e53d2e-gun-npm-katana-0-3-0-package-tgz /Users/shogun/.npm/katana/0.3.0/package.tgz
89 silly lockFile 7ffd316f--shogun-npm-katana-0-3-0-package /Users/shogun/.npm/katana/0.3.0/package
90 verbose lock /Users/shogun/.npm/katana/0.3.0/package /Users/shogun/.npm/7ffd316f--shogun-npm-katana-0-3-0-package.lock
91 silly lockFile 7ffd316f--shogun-npm-katana-0-3-0-package /Users/shogun/.npm/katana/0.3.0/package
92 silly lockFile 7ffd316f--shogun-npm-katana-0-3-0-package /Users/shogun/.npm/katana/0.3.0/package
93 verbose tar unpack /Users/shogun/.npm/katana/0.3.0/package.tgz
94 silly lockFile 7ffd316f--shogun-npm-katana-0-3-0-package /Users/shogun/.npm/katana/0.3.0/package
95 verbose lock /Users/shogun/.npm/katana/0.3.0/package /Users/shogun/.npm/7ffd316f--shogun-npm-katana-0-3-0-package.lock
96 silly lockFile 87e53d2e-gun-npm-katana-0-3-0-package-tgz /Users/shogun/.npm/katana/0.3.0/package.tgz
97 verbose lock /Users/shogun/.npm/katana/0.3.0/package.tgz /Users/shogun/.npm/87e53d2e-gun-npm-katana-0-3-0-package-tgz.lock
98 silly gunzTarPerm modes [ '755', '644' ]
99 silly gunzTarPerm extractEntry package.json
100 silly gunzTarPerm extractEntry .npmignore
101 silly gunzTarPerm extractEntry bin/create
102 silly gunzTarPerm extractEntry bin/katana
103 silly gunzTarPerm extractEntry bin/modules
104 silly gunzTarPerm extractEntry katana.jpg
105 silly gunzTarPerm extractEntry lib/bootstrap.js
106 silly gunzTarPerm extractEntry lib/cookie.js
107 silly gunzTarPerm extractEntry lib/katana.js
108 silly gunzTarPerm extractEntry lib/model.js
109 silly gunzTarPerm extractEntry lib/controller.js
110 silly gunzTarPerm extractEntry lib/config.js
111 silly gunzTarPerm extractEntry lib/request.js
112 silly gunzTarPerm extractEntry lib/response.js
113 silly gunzTarPerm extractEntry lib/router.js
114 silly gunzTarPerm extractEntry lib/utils.js
115 silly gunzTarPerm extractEntry lib/consolidate.js
116 silly gunzTarPerm extractEntry lib/static.js
117 silly gunzTarPerm extractEntry lib/module.js
118 silly gunzTarPerm extractEntry lib/view.js
119 silly gunzTarPerm extractEntry lib/multiparser.js
120 silly gunzTarPerm extractEntry lib/store/index.js
121 silly gunzTarPerm extractEntry lib/store/memory.js
122 silly gunzTarPerm extractEntry lib/store/mongodb.js
123 silly gunzTarPerm extractEntry lib/store/mongoose.js
124 silly gunzTarPerm extractEntry lib/store/mysql.js
125 silly gunzTarPerm extractEntry lib/store/pgsql.js
126 silly gunzTarPerm extractEntry lib/store/redis.js
127 silly gunzTarPerm extractEntry lib/session/index.js
128 silly gunzTarPerm extractEntry lib/session/memory.js
129 silly gunzTarPerm extractEntry lib/session/redis.js
130 silly gunzTarPerm extractEntry lib/session/store.js
131 silly gunzTarPerm extractEntry modules.json
132 silly gunzTarPerm extractEntry readme.ja.md
133 silly gunzTarPerm extractEntry readme.md
134 silly gunzTarPerm extractEntry template/app.js
135 silly gunzTarPerm extractEntry template/application/config/development/application.js
136 silly gunzTarPerm extractEntry template/application/config/development/routing.js
137 silly gunzTarPerm extractEntry template/application/config/development/stores.js
138 silly gunzTarPerm extractEntry template/application/controllers/home.js
139 silly gunzTarPerm extractEntry template/application/views/index.html
140 silly gunzTarPerm extractEntry todo.md
141 verbose read json /Users/shogun/.npm/katana/0.3.0/package/package.json
142 silly lockFile 7ffd316f--shogun-npm-katana-0-3-0-package /Users/shogun/.npm/katana/0.3.0/package
143 silly lockFile 7ffd316f--shogun-npm-katana-0-3-0-package /Users/shogun/.npm/katana/0.3.0/package
144 silly lockFile 87e53d2e-gun-npm-katana-0-3-0-package-tgz /Users/shogun/.npm/katana/0.3.0/package.tgz
145 silly lockFile 87e53d2e-gun-npm-katana-0-3-0-package-tgz /Users/shogun/.npm/katana/0.3.0/package.tgz
146 silly shasum updated bytes 40960
147 silly shasum updated bytes 40960
148 silly shasum updated bytes 40960
149 silly shasum updated bytes 40960
150 silly shasum updated bytes 40960
151 silly shasum updated bytes 40960
152 silly shasum updated bytes 32626
153 info shasum 406d8e92d5218b70349e5602a291b237bbf695ab
153 info shasum /Users/shogun/.npm/katana/0.3.0/package.tgz
154 verbose from cache /Users/shogun/.npm/katana/0.3.0/package/package.json
155 verbose chmod /Users/shogun/.npm/katana/0.3.0/package.tgz 644
156 verbose chown /Users/shogun/.npm/katana/0.3.0/package.tgz [ 501, 20 ]
157 silly lockFile 3a52ce78- .
158 silly publish { name: 'katana',
158 silly publish   description: 'Easy to use, modular web framework for any Node.js samurai.',
158 silly publish   version: '0.3.0',
158 silly publish   author:
158 silly publish    { name: 'Shogun',
158 silly publish      email: 'Shogun147@gmail.com',
158 silly publish      url: 'http://github.com/Shogun147' },
158 silly publish   contributors: [ { name: 'Shogun', email: 'Shogun147@gmail.com' } ],
158 silly publish   keywords:
158 silly publish    [ 'katana',
158 silly publish      'framework',
158 silly publish      'mvc',
158 silly publish      'hmvc',
158 silly publish      'oop',
158 silly publish      'router',
158 silly publish      'web',
158 silly publish      'development' ],
158 silly publish   homepage: 'http://katanajs.com/ (comming soon)',
158 silly publish   repository:
158 silly publish    { type: 'git',
158 silly publish      url: 'git://github.com/Shogun147/Katana.git',
158 silly publish      web: 'http://github.com/Shogun147/Katana' },
158 silly publish   bugs: { url: 'https://github.com/Shogun147/Katana/issues' },
158 silly publish   dependencies:
158 silly publish    { mkdirp: '*',
158 silly publish      async: '*',
158 silly publish      joose: '*',
158 silly publish      formidable: '*',
158 silly publish      semver: '*',
158 silly publish      progress: '*',
158 silly publish      crypto: '*',
158 silly publish      validator: '*',
158 silly publish      underscore: '*',
158 silly publish      qs: '*',
158 silly publish      commander: '1.3.2',
158 silly publish      'node-static': '*',
158 silly publish      winston: '*',
158 silly publish      request: '*',
158 silly publish      colors: '*',
158 silly publish      tar: '*' },
158 silly publish   devDependencies: {},
158 silly publish   main: './lib/katana',
158 silly publish   bin: { katana: './bin/katana' },
158 silly publish   scripts: {},
158 silly publish   preferGlobal: true,
158 silly publish   engines: { node: '> 0.6' },
158 silly publish   readme: '# [Katana](https://github.com/Shogun147/Katana) \n\n使いやすい、Node.jsの侍たちの為のHMVCスケーラブルなWEBフレームワーク\n=======\n\n## コンテンツ\n\n* [Features](#features)\n* [Installation](#installation)\n* [Quick start](#quick-start)\n* [Routing](#routing)\n* [Modules](#modules)\n* [Controllers](#controllers)\n  * [Hooks](#hooks)\n* [Models](#models)\n* [Views](#views)\n* [Events](#events)\n* [Sessions](#sessions)\n* [Logging](#logging)\n* [Examples](#examples)\n* [Contributing](#contributing)\n* [License](#license)\n\n## Features\n\n* 強力で柔軟性のあるクラシカルなルータ\n* スケーラブルなHMVCアーキテクチャ\n* 環境ベースのコンフィギュレーション\n* アプリケーションのクイックジェネレータ\n* Cookieとセッションのサポート\n* テンプレート、パーシャルをサポート\n* 完全にノンブロッキング\n* …\n\n## Installation\n\nKatanaを最も早く使うには、npmでインストールすることです。\n\n```bash\n$ npm install -g katana\n```\n\n## Quick start\n\n最も簡単に開始する方法は、アプリケーションを生成するKatana利用して実行することです。\n\n```bash\n$ katana create app\n$ cd app\n$ npm install\n```\n\nアプリのパスはオプションであり、現在のパスからの相対パスです。\n\nこれで、サーバを起動する準備が整いました。\n\n```bash\n$ node app\n```\n\n### 作成後の基本的なアプリケーションのレイアウトは次のようになります。\n    .\n    ├── app.js\n    ├── application\n    │   ├── config\n    │   │   ├── development\n    │   │   │   ├── application.js\n    │   │   │   ├── routing.js\n    │   │   │   └── stores.js\n    │   │   └── production\n    │   ├── controllers\n    │   │   └── home.js\n    │   ├── models\n    │   └── views\n    │       └── index.html\n    ├── modules\n    ├── public\n    │   ├── images\n    │   ├── scripts\n    │   └── styles\n    └── temp\n\n## Routing\n\nクラシカルなルーティングは、Katanaのフレームワークの中で最も強力なfutureの一つです。 これは、リクエストされたURIに対応するコントローラとアクションを決定するためにURIセグメントを使用しています。<br>\nその為、他のNode.js フレームワークとは異なり、ルーティング ルールを作成することなく、コントローラーとアクションを追加するだけで、パスを変更でき、独自のルールを書くこともできます。<br>\nルールがない場合、URIパスとして扱われます： http://katana:8000/`controller`/`action`/`arg1`/../`argN`\n\nもしそうであればURIのパスは次のとおりです。 `http://katana:8000/account/login`<br>\nそして `controller=account` と `action=login` です。\n\nURIセグメントがない場合、デフォルトパスは、`home`コントローラの`index`アクションが使用されます。\n\nまた、ユーザー·プロファイルを表示するような場合、ルーティングルールを設定することによって、パスを書き換えることができます。\n\n```javascript\nroutes: {\n  // 各リクエストメソッドは自身のルート（経路）があります。\n  get: [\n    [\'user/:user_id\', \'users/profile\']\n  ]\n\n  // すべてのメソッドのためのルート（経路）を設定することもできます。\n  all: [\n    // リクエストされたメソッドをルート（経路）が一致しない場合は、このルートをしようとします\n  ]\n}\n```\n\nまたは、ルートプレフィックスとしてリクエストメソッドを設定できます：\n\n\n```javascript\nroutes: [\n  [\'get user/:user_id\', \'users/profile\'], // これは get メソッドをルーティングします。\n  [\'* user/:user_id\', \'users/profile\'] // すべてのメソッド\n  [\'user/:user_id\', \'users/profile\'] // 設定されていない場合は、すべてのメソッドをチェックします\n]\n```\n\n\nこれは、`controller=users` と\n`action=profile`を設定し、user_idは`Request.params.user_id`として利用できるようになります。\n\nまたは、MVCモジュールにこのリクエストを渡すことができます：\n\n```javascript\nroutes: {\n  get: [\n    [\'user/:user_id\', \'#auth/users/profile\']\n  ]\n}\n```\n\nこのリクエストは、`auth`モジュール、`controller=users` と\n`action=profile`をパスする`＃`シンボルを意味します。\n\nまた、次のようuser_idの書式を設定することができます：\n\n```javascript\nroutes: {\n  get: [\n    [\'user/:user_id([0-9]+)\', \'#auth/users/profile\']\n  ]\n}\n```\n\n`!重要:` MVCモジュールは、独自のルーティングルールを持っているかもしれません。\n\nその他の例：\n  \n```javascript\n[\'news/:category/rss.:format(xml|json)?\', \'news/rss\'] will allow:\n news/any_category/rss\n news/any_category/rss.xml\n news/any_category/rss.json\n\n and News controller:\n\n methods: {\n   rss: function(Response, Request) {\n     // 今、Request.params.categoryとRequest.params.formatを使用することができます\n     var format = Request.params.format || \'xml\'; // default xml\n\n     ...\n   }\n }\n```\n\n## Modules\n\nKatanaでは、モジュールはMVCの一部のアプリケーションとして、またはミドルウェアとして使用することができます。\n\nMVCモジュールの場合は、メインMVCのと同じようにルーティングを使用することができます。<br>\nまた、runメソッドを呼び出すことにより、ウィジェットとしてそれらを実行することができます：\n\n```javascript\nModule(\'auth\').run(\'users/list\');\n```\n\nこれは、`auth`モジュールから`users`コントローラの`list`アクションを実行します。\n\nミドルウェア モジュールは特定のアプリケーション イベントをリッスンし、彼らが必要とする対話をすることができます。\n\n例えばauthモジュールは次のようになります。\n\n```javascript\nvar User = App.Model(\'auth:user\'); // authモジュールのuserモデルを取得\n\n// listen new request event\nApp.on(\'request\', function(Request, Response, callback) {\n  Request.user = new User(Request.session);\n\n  callback(); // アプリケーションが続行に必要な作業が終わったときのコールバック\n});\n```\n\nその後コントローラからユーザーオブジェクト \'Request.user\' としてアクセスできます。\n\n### Sharing modules\n\n[Katana](https://github.com/Shogun147/Katana)\nはパブリックモジュールをダウンロードしてアプリケーションにインストールができる共有システム基本モジュールが付属しています。\n\nKatanaバイナリがモジュールと対話するためにいくつかの新しいコマンドがあります。\n\n* `katana modules` - 使用可能なすべてのモジュールを一覧表示。\n* `katana modules-search <str>` - \'str\' を含むモジュール名または記述を検索します。\n* `katana modules-update` - モジュールのリストの関連情報を更新します。\n* `katana modules-install <name> [url]` - アプリケーションモジュールのインストールまたは再インストールを行います。   * `name` or `name@version` -モジュール名\n  * `url` or `username:repository` or `username:repository@version` - オプションurlまたは github username:repositoryの組み合わせ\n\n   `name`　のみが提供された場合は、ダウンロードURLはモジュールレジストリファイルに含まれるモジュールのデータからビルドされます。名前は、バージョンタグが続く場合があります。<br>\n  2番目の引数が url の場合はモジュールはその url からダウンロードされます。<br>\n  2番目の引数が、 `username:repository@version` の組み合わせはurlです: `https://github.com/:username/:repository/tarball/:version` <br> \n  `version` がない場合は、要求されたものは、レジストリ内のモジュールに対して使用可能な最後のバージョンになるでしょう。有効なバージョンが次に検出されない場合の `master` ブランチが要求されます。<br>\n  カスタムダウンロードURLモジュールの場合はgzipで圧縮されたtarballまだなければなりません。<br>\n  インストール例:\n    * `katana modules install auth`\n    * `katana modules install auth@0.1.0`\n    * `katana modules install Shogun147:Katana-auth`\n    * `katana modules install Shogun147:Katana-auth@0.1.0`\n    * `katana modules install https://github.com/Shogun147/Katana-auth/tarball/master`\n    * `katana modules install http://my-site.com/downloads/module/v1.0.5`\n\n* `katana modules uninstall <name>` - モジュールをアンインストールし削除する\n* `katana modules enable <name>` - モジュールを有効にする\n* `katana modules disable <name>` - モジュールを無効にする\n* `katana modules` - list all available modules.\n* `katana module search <str>` - search modules that contain `str` in name or description.\n* `katana module update` - update modules list and their info.\n* `katana module install <name> [url]` - install or reinstall app module.\n  * `name` or `name@version` - module name\n  * `url` or `username:repository` or `username:repository@version` - optional url or github username:repository combination.\n\nこのアクション [`install`, `uninstall`, `enable`, `disable`] のそれぞれに対してモジュールが呼びだされ、それらはhookを持っている可能性があります。hookは、モジュールのhooksディレクトリに格納されています。<br>\nhookはこのアクションにユニークな何かをする必要があるときに便利です。 例えば、 `install` (modules/:name/hooks/install.js) hookは、publicディレクトリにデータベースまたはコピーモジュール資産の新しいテーブルを作成することができます...\n\nモジュールのレジストリは `https://raw.github.com/Shogun147/Katana/master/modules.json`\nからダウンロードされます。 リストに新しいモジュールを追加するには、単にこのファイルをforkしてpullリクエストを送信します。\nこれは、`katana modules` コマンドと検索記載される、あなたのモジュールになります。\n\n## Controllers\n\nコントローラは、あらゆるアプリケーションの最も重要な部分であり、それらは、着信リクエストを処理し、レスポンスを送信する。\n\nシンプルなコントローラは次のようになります。\n\n```javascript\n// 独自のコントローラクラスを定義する\nClass(\'Home_Controller\', {\n  isa: App.Controller, // Katanaコアコントローラを拡張\n\n  methods: {\n    index: function(Response, Request) {\n      Response.send(\'Hello World!\');\n    }\n  }\n});\n\nmodule.exports = new Home_Controller;\n```\n\nhttp://katana:8000/を開くことにより、この`index`アクションにアクセスすることができます。任意のURIパスがないので、\nconfigのdefaultのコントローラの`home`とアクション`index`を使用します。また直接\nhttp://katana:8000/`home`/ と `index` の defaultアクション まてゃ\nhttp://katana:8000/`home`/`index` を開きアクセスすることができます。\n\n### Hooks\n\nJoose [Method\nModifiers(メソッド修飾子)]の力で(http://joose.github.com/Joose/doc/html/Joose/Manual/MethodModifiers.html)\n(`before`, `after`, `override` and `around`) クラスのメソッドを呼び出す前、\nまたはメソッドの呼び出し後に発生する可能性があるアクションの結果を変更し、returnすることができます。\n\n例えばindexメソッドはログインユーザーのみという制限をしましょう：\n\n```javascript\nClass(\'Home_Controller\', {\n  isa: App.Controller,\n\n  methods: {\n    index: function(Response, Request) {\n      Response.send(\'Hello World!\');\n    }\n  },\n\n  around: {\n    // ラップしたいメソッドと同名\n    index: function(method, Response, Request) {\n      var User = Request.user;\n\n      // ユーザがログインしていない場合、次のログインページにリダイレクト\n      if (!User.logged_in()) {\n        return Request.redirect(\'/login\');\n      }\n\n      // 他に、元のメソッドを呼び出す\n      method(Response, Request);\n    }\n  }\n});\n```\n\n`call`修飾子は、正規表現を使用してフック条件に一致するすべてのメソッドに適用することができます。\n\n例えば、すべてのメソッドに対してアクセスを制限しましょう：\n\n```javascript\nClass(\'Home_Controller\', {\n  isa: App.Controller,\n\n  methods: {\n    index: function(Response, Request) {\n      Response.send(\'Hello World!\');\n    }\n  },\n\n  call: {\n    // メソッド名の代わりに正規表現を使う\n    // これは、すべてのコントローラのメソッド呼び出しに適用されます\n   \'.*\': function(method, Response, Request) {\n      var User = Request.user;\n\n      // ユーザがログインしていない場合、次のログインページにリダイレクト\n      if (!User.logged_in()) {\n        return Request.redirect(\'/login\');\n      }\n\n      // 他に、元のメソッドを呼び出す\n      method(Response, Request);\n    }\n  }\n});\n```\n\n\n## Models\n\nKatanaは何らかの方法でモデルを定義する場合や、特定のモジュールを使用する開発者を制限しませんでした。\nそれだけで、アプリケーションのモデル·ディレクトリまたはモジュールからすべてをオートロードし、ローカルレジストリに格納します。\n\nアクセスするには次のようになります：<br>\n\n    var News = App.Model(\'news\'); // モデルオブジェクトを取得\n\nモジュールからモデルを取得するには、コロン`:` でモジュール名とモデル·パスを分離する必要があります。\n例えば、`auth`モジュールの呼び出しと`user`モデルの取得は、 `App.Model(\'auth:user\')`\n\nモデルファイルは次のようになります：\n\n```javascript\nvar Mongoose = App.Store(\'mongoose\'); // 格納されている設定ファイルを見て、mongooseの接続を取得\nvar Schema = require(\'mongoose\').Schema;\n\nvar User = new Schema({\n  username: String,\n  password: String,\n  email: String,\n  signed_at: Date,\n  roles: [\'user\', \'moderator\', \'administrator\']\n});\n\nmodule.exports = Mongoose.model(\'User\', User);\n```\n\n## Views\n\nviewをレンダリングするには、いくつかの方法を使用できます。\n\n```javascript\nvar View = App.View;\n\nClass(\'Home_Controller\', {\n  isa: App.Controller,\n\n  methods: {\n    index: function(Response, Request) {\n      // 直接viewのコンテンツをレンダリングして送信\n      Response.render(\'index\', { title: \'Hello World\' }); // this will render index.html file from views\n\n      // コンテンツをレンダリング\n      var content = View.render(\'index\', { title: \'Hello World\' });\n      // その後、レスポンスを送信\n      Response.send(content);\n\n      // モジュールからviewをレンダリング\n      Users.find({}, function(error, users) {\n        if (error) { return Response.send(\'Error! Blablabla\'); }\n\n        // もう一度viewでモジュール名はパスとコロンで区切られる\n        var list = View.render(\'auth:list\', users);\n\n        Response.render(\'index\', { users: list });\n      });\n    }\n  }\n});\n```\n\nコントローラもthis.renderの呼び出しに渡されるグローバルデータを持つことができます：\n  \n```javascript\nClass(\'Home_Controller\', {\n  isa: App.Controller,\n\n  have: {\n    // グローバルデータをコントローラに設定\n    data: {\n      title: \'This is title for all pages for this controller\',\n      total_requests: 0\n    }\n  },\n\n  methods: {\n    index: function(Response) {\n      // アクションからグローバルデータをコントローラーに設定することもできます。\n      this.set(\'copyright\', \'blablabla\');\n      // または\n      this.data.total_requests++;\n    \n      // this.renderメソッドを使用してビューをレンダリングすることにより、コントローラのデータは、このビューに渡します\n      var content = this.render(\'index\'); // <?-title?>, <?-total_requests?>\n    \n      // また、レンダリングにそれらを設定することによって、グローバルを書き換える場合があります\n      var content = this.render(\'index\', { title: \'This is rewritted title\', foo: \'bar\' });\n    \n      Response.send(content);\n    }\n  }\n});\n```\n\n## Events\n\nKatanaアプリケーションは、特定のイベントを別の手順でします。それらのいくつかはミドルウェアで利用可能で、それ以外は、ブートストラップ制御フローのためのものです。\n\n例えば、`auth`モジュールが（Modulesを参照）のリクエストに対して、userモデルを割り当てるために`request`イベントをリッスンすることができます。\n\nまたは、アプリケーションサーバで`chat`モジュール作成する場合、socket.ioサーバを必要になります。\n\n```javascript\nvar socket_io = require(\'socket.io\');\nvar io;\n\n// Http.Serverがリスニング開始準備ができたらイベントを発行します\nApp.on(\'ready\', function(callback) {\n      io = socket_io.listen(App.server);\n    \n      io.sockets.on(\'connection\', function (socket) {\n        // …\n      });\n    \n      callback();\n});\n```\n\n## Sessions\n\nKatanaはセッションをサポートするためのモジュールで構築しています。アプリのそれぞれの特定の訪問者をデータで関連付け、そのデータがリクエスト間で永続化するように設定する方法を示します。\n\n### Data stores\n今、Katanaは2つのセッションデータストアをサポートしています。(もっと来て）\n\n* **Memory** (デフォルト):\n  開発に便利です。セッションデータは、ワーカー·プロセス·レベルでのメモリーに保存され、これは、クラスタで動作しないことを意味します。アプリを再起動したときにも、すべてのセッションが消失されます。\n\n* **Redis**:\n  セッションはRedisのNOSQLデータベースに保存され、アプリを再起動しても持続されています。Redisのサーバーまたはclusterを必要とします。\n\n### Using sessions\n\nまずアプリケーション構成ファイルにセッションを有効にする必要があります。 デフォルトのセッションは、次のようになります。\n\n```javascript\nsession: {\n  // セッションのサポートを有効または無効にする\n  enabled: true,\n\n  // cookieのセッション識別子名\n  key_name: \'session_id\',\n\n  // セッションIDの長さ\n  key_length: 32,\n\n  // 非アクティブなセッションを削除する前の有効期間\n  lifetime: 1000 * 60 * 60 * 24 * 7,\n\n  // セッションストアは,１つの config/stores.js から\n  store: \'redis\',\n            \n  // 新規セッションのデフォルトのデータ\n  defaults: {\n  \n  }\n}\n```\n\nいったんセッションを有効にすると、セッションオブジェクトは、各リクエストに割り当てられ、\nデータは、セッションストアから自動的にロードされます。このオブジェクトは\n`Request.sessionの`としてアクセスすることができます。今のところは利用できるpublicメソッドは`set`、`get`と`remove`です。\n\nユーザーリクエストのカウンターの例\n\n```javascript\nindex: function(Response, Request) {\n  var Session = Request.session;\n\n  // 現在のリクエスト数、デフォルトの0（ゼロ）を得る\n  var counter = Session.get(\'requests\', 0);\n\n  counter++;\n\n  // 新しい値を設定\n  Session.set(\'requests\', counter);\n\n  // セッションデータは、自動的にレスポンスを送信する前にストアに保存されます\n  // また、configのkey_nameからCookieにセッションIDを保存します。\n  Response.send(\'You have visited this page \'+ counter +\' times\');\n}\n```\n\n## Logging\n\nKatanaはログモジュール [winston](https://github.com/flatiron/winston)を使用しています。\n`App.log`として使用されており、多くのトランスポートやオプションを追加できます。 公式のドキュメントを確認してください。\n\n## Examples\n\n* [ToDo](https://github.com/Shogun147/Katana-ToDo) - Simple todo application\n\n## Contributing\n興味があったり、どなたでもフレームワークの新しいアイデア、issueやpullリクエストを送って頂くことで、貢献頂けます。\nお手伝い頂けるとありがたいです。\n\n## License\nThe MIT License\n\nCopyright © 2012 D.G. Shogun <Shogun147@gmail.com>\ntranslate © 2012 dai_yamashita\n',
158 silly publish   readmeFilename: 'readme.ja.md',
158 silly publish   _id: 'katana@0.3.0',
158 silly publish   dist: { shasum: '406d8e92d5218b70349e5602a291b237bbf695ab' },
158 silly publish   _from: '.' }
159 verbose url raw katana
160 verbose url resolving [ 'https://registry.npmjs.org/', './katana' ]
161 verbose url resolved https://registry.npmjs.org/katana
162 info trying registry request attempt 1 at 14:49:01
163 http PUT https://registry.npmjs.org/katana
164 http 409 https://registry.npmjs.org/katana
165 verbose url raw katana
166 verbose url resolving [ 'https://registry.npmjs.org/', './katana' ]
167 verbose url resolved https://registry.npmjs.org/katana
168 info trying registry request attempt 1 at 14:49:02
169 http GET https://registry.npmjs.org/katana
170 http 200 https://registry.npmjs.org/katana
171 error publish fail Cannot publish over existing version.
171 error publish fail Update the 'version' field in package.json and try again.
171 error publish fail
171 error publish fail If the previous version was published in error, see:
171 error publish fail     npm help unpublish
171 error publish fail
171 error publish fail To automatically increment version numbers, see:
171 error publish fail     npm help version
172 error System Darwin 11.0.0
173 error command "/Users/shogun/.nvm/v0.8.23/bin/node" "/Users/shogun/.nvm/v0.8.23/bin/npm" "publish"
174 error cwd /Users/shogun/Projects/Node/Katana
175 error node -v v0.8.23
176 error npm -v 1.2.18
177 error code EPUBLISHCONFLICT
178 verbose exit [ 1, true ]
