{"name":"Katana","body":"# [Katana](https://github.com/Shogun147/Katana) \r\n\r\nEasy to use, hmvc scalable web framework for any Node.js samurai, focuses on simplicity, maintainability and performance.\r\n\r\n## Features\r\n\r\n* Powerful, flexible classical router\r\n* Scalable through HMVC architecture \r\n* Environment based configuration\r\n* Application quick generators\r\n* Cookies and Session support\r\n* Templating, partials support\r\n* Fully non-blocking\r\n* …\r\n\r\n## Installation\r\n\r\nFastest way to get Katana is to install it with NPM:\r\n\r\n    $ npm install -g katana\r\n\r\n## Quick start\r\n\r\nThe quickest way to start is to utilize the Katana executable to generate an application:\r\n\r\n    $ katana create app\r\n    $ cd app\r\n\r\nThe app path is optional and is relative to current path.\r\n\r\nThen you are ready to start the server:\r\n\r\n    $ node app\r\n\r\n### Basic application layout after creation will look like this:\r\n    .\r\n    ├── app.js\r\n    ├── application\r\n    │   ├── config\r\n    │   │   ├── development\r\n    │   │   │   ├── application.js\r\n    │   │   │   ├── routing.js\r\n    │   │   │   └── stores.js\r\n    │   │   └── production\r\n    │   ├── controllers\r\n    │   │   └── home.js\r\n    │   ├── models\r\n    │   └── views\r\n    │       └── index.html\r\n    ├── modules\r\n    ├── public\r\n    │   ├── images\r\n    │   ├── scripts\r\n    │   └── styles\r\n    └── temp\r\n\r\n## Routing\r\n\r\nClassical routing is one the most powerful futures of Katana framework. It uses uri segments to determine the controller and action for a requested URI.<br>\r\nSo unlike in other Node.js framework you may just add controllers and actions without the need to create routing rules, but also let you write your own rules which may change the path.<br>\r\nWithout any rules, uri path will be treated as: http://katana:8000/`controller`/`action`/`arg1`/../`argN`\r\n\r\nSo if uri path is: `http://katana:8000/account/login`<br>\r\nThen `controller=account` and `action=login`.\r\n\r\nIf there no uri segments then default path will be used, `home` as controller and `index` as action.\r\n\r\nYou can also rewrite this path by set the routing rule, for example:\r\n\r\n    routes: [\r\n      ['account/(.*)', 'auth/$1']\r\n    ]\r\n\r\nThis will set `controller=auth` and `action=login`.\r\n\r\nOr you may pass this request to mvc module:\r\n\r\n    routes: [\r\n      ['account/(.*)', '#auth/actions/$1']\r\n    ]\r\n\r\nThe `#` symbol meen that this request will pass to `auth` module, `controller=actions` and `action=login`.\r\n\r\n`!important:` mvc modules may have their own routing rules.\r\n\r\n## Modules\r\n\r\nIn Katana modules can be used as mvc part or your application or as middleware.\r\n\r\nFor mvc modules you can use routing the same way as for main mvc.<br>\r\nAlso you can run them as widgets by calling run method: \r\n\r\n    Module('auth').run('users/list');\r\n\r\nThis will run `list` action of `users` controller from `auth` module.\r\n\r\nMiddleware modules can listen specific application events and interact as they need.\r\n\r\nFor example auth module can look like this:\r\n\r\n    var App = require('katana'); // or global.App\r\n    var User = App.Model('auth:user'); // get user model of auth module\r\n\r\n    // listen new request event\r\n    App.on('request', function(Request, Response, callback) {\r\n      Request.user = new User(Request.session);\r\n\r\n      callback(); // callback when we're done here, required for application to continue\r\n    });\r\n\r\nand then in our controller we can access user object as `Request.user`.\r\n\r\n## Controllers\r\n\r\nControllers are almost most important part of any application, they handle incoming requests and send responses.\r\n\r\nA simple controller looks like this:\r\n\r\n    var App = require('katana');\r\n    \r\n    require('joose'); // load Joose, great class system\r\n\r\n    // define our controller Class\r\n    Class('Home_Controller', {\r\n      isa: App.Controller, // extend Katana Core Controller\r\n\r\n      methods: {\r\n        index: function(Response, Request) {\r\n          Response.send('Hello World!');\r\n        }\r\n      }\r\n    });\r\n\r\n    module.exports = new Home_Controller;\r\n\r\nAnd now we can access this `index` action by opening http://katana:8000/, without any uri path this will use default controller and action from config which are `home` and `index`. Also we can access them directly by opening http://katana:8000/`home`/ with `index` as default action or http://katana:8000/`home`/`index`.\r\n\r\n## Models\r\n\r\nKatana did not limit the developer to define a model in some way or to use a specific module. It just autoload all from the models directory of application or a module and store them in a local registry.\r\n\r\nYou can access them like this:<br>\r\n\r\n    var App = require('katana'); // or global.App\r\n    var News = App.Model('news'); // get model object\r\n\r\nTo get a model from module you need to separate module name and model path with colon `:`, for example to get `user` model of `auth` module call: `App.Model('auth:user')`.\r\n\r\nModel file can look like this:\r\n\r\n    var App = require('katana');\r\n    var Mongoose = App.Store('mongoose'); // get mongoose connection, look at stores config file\r\n    var Schema = require('mongoose').Schema;\r\n\r\n    var User = new Schema({\r\n      username: String,\r\n      password: String,\r\n      email: String,\r\n      signed_at: Date,\r\n      roles: ['user', 'moderator', 'administrator']\r\n    });\r\n\r\n    module.exports = Mongoose.model('User', User);\r\n\r\n## Views\r\n\r\nTo render a view you can use a few methods:\r\n\r\n    var App = require('katana');\r\n    var View = App.View;\r\n\r\n    require('joose');\r\n\r\n    Class('Home_Controller', {\r\n      isa: App.Controller,\r\n\r\n      methods: {\r\n        index: function(Response, Request) {\r\n          // directly render and send a view content\r\n          Response.render('index', { title: 'Hello World' }); // this will render index.html file from views\r\n\r\n          // get rendered content\r\n          var content = View.render('index', { title: 'Hello World' });\r\n          // and latter send response\r\n          Response.send(content);\r\n\r\n          // render a view from module\r\n          Users.find({}, function(error, users) {\r\n            if (error) { return Response.send('Error! Blablabla'); }\r\n\r\n            // again module name separated by colon, and then path to the view\r\n            var list = View.render('auth:list', users);\r\n\r\n            Response.render('index', { users: list });\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\nControllers can also have their global data, which will be passed for the this.render calls:\r\n\r\n    var App = require('katana');\r\n  \r\n    require('joose');\r\n  \r\n    Class('Home_Controller', {\r\n      isa: App.Controller,\r\n    \r\n      have: {\r\n        // set global controller data\r\n        data: {\r\n          title: 'This is title for all pages for this controller',\r\n          total_requests: 0\r\n        }\r\n      },\r\n    \r\n      methods: {\r\n        index: function(Response) {\r\n          // you can also set global controller data from actions\r\n          this.set('copyright', 'blablabla');\r\n          // or\r\n          this.data.total_requests++;\r\n        \r\n          // by render the view with this.render method, the controller data will pass to this view\r\n          var content = this.render('index'); // <?-title?>, <?-total_requests?>\r\n        \r\n          // we may also rewrite globals by set them on render\r\n          var content = this.render('index', { title: 'This is rewritted title', foo: 'bar' });\r\n        \r\n          Response.send(content);\r\n        }\r\n      }\r\n    });\r\n\r\n## Events\r\n\r\nKatana application emit specific events for different steps.\r\nFew of them are available for middlewares, the others are for bootstrap control flow.\r\n\r\nFor example, `auth` module can listen `request` event to assign a user model for request (see Modules).\r\n\r\nOr a `chat` module which need application server to create a socket.io server.\r\n\r\n    var App = require('katana');\r\n\r\n    var socket_io = require('socket.io');\r\n    var io;\r\n\r\n    // ready event is emitted when Http.Server start listening\r\n    App.on('ready', function(callback) {\r\n\t  io = socket_io.listen(App.server);\r\n\t\r\n\t  io.sockets.on('connection', function (socket) {\r\n\t    // …\r\n\t  });\r\n\t\r\n\t  callback();\r\n    });\r\n\r\n## Contributing\r\nAnyone interested or who like the framework idea can contribute by sending new ideas, issues or pull requests. Any help would be appreciated.\r\n\r\n## License\r\nThe MIT License\r\n\r\nCopyright © 2012 D.G. Shogun <Shogun147@gmail.com>","tagline":"Easy to use, hmvc scalable web framework for any Node.js samurai","google":"Katana nodejs node.js framework router modules mvc hmvc controllers async","note":"Don't delete this file! It's used internally to help with page regeneration."}