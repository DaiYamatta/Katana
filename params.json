{"name":"Katana","tagline":"Easy to use, modular web framework for any Node.js samurai","body":"# [Katana](https://github.com/Shogun147/Katana) \r\n\r\nEasy to use, modular web framework for any Node.js samurai, focuses on simplicity, maintainability and performance.\r\n\r\n## Contents\r\n\r\n* [Features](#features)\r\n* [Installation](#installation)\r\n* [Quick start](#quick-start)\r\n* [Routing](#routing)\r\n* [Modules](#modules)\r\n* [Controllers](#controllers)\r\n  * [Hooks](#hooks)\r\n* [Models](#models)\r\n* [Views](#views)\r\n* [Events](#events)\r\n* [Sessions](#sessions)\r\n* [Logging](#logging)\r\n* [Examples](#examples)\r\n* [Contributing](#contributing)\r\n* [License](#license)\r\n\r\n## Features\r\n\r\n* Powerful, flexible classical router\r\n* Scalable through HMVC architecture \r\n* Environment based configuration\r\n* Application quick generators\r\n* Cookies and Session support\r\n* Templating, partials support\r\n* Fully non-blocking\r\n* …\r\n\r\n## Installation\r\n\r\nFastest way to get Katana is to install it with NPM:\r\n\r\n```bash\r\n$ npm install -g katana\r\n```\r\n\r\n## Quick start\r\n\r\nThe quickest way to start is to utilize the Katana executable to generate an application:\r\n\r\n```bash\r\n$ katana create app\r\n$ cd app\r\n$ npm install\r\n```\r\n\r\nThe app path is optional and is relative to current path.\r\n\r\nThen you are ready to start the server:\r\n\r\n```bash\r\n$ node app\r\n```\r\n\r\n### Basic application layout after creation will look like this:\r\n    .\r\n    ├── app.js\r\n    ├── application\r\n    │   ├── config\r\n    │   │   ├── development\r\n    │   │   │   ├── application.js\r\n    │   │   │   ├── routing.js\r\n    │   │   │   └── stores.js\r\n    │   │   └── production\r\n    │   ├── controllers\r\n    │   │   └── home.js\r\n    │   ├── models\r\n    │   └── views\r\n    │       └── index.html\r\n    ├── modules\r\n    ├── public\r\n    │   ├── images\r\n    │   ├── scripts\r\n    │   └── css\r\n    └── temp\r\n\r\n## Routing\r\n\r\nClassical routing is one the most powerful futures of Katana framework. It uses uri segments to determine the controller and action for a requested URI.<br>\r\nSo unlike in other Node.js framework you may just add controllers and actions without the need to create routing rules, but also let you write your own rules which may change the path.<br>\r\nWithout any rules, uri path will be treated as: http://katana:8000/`controller`/`action`/`arg1`/../`argN`\r\n\r\nSo if uri path is: `http://katana:8000/account/login`<br>\r\nThen `controller=account` and `action=login`.\r\n\r\nIf there no uri segments then default path will be used, `home` as controller and `index` as action.\r\n\r\nYou can also rewrite path by set the routing rule, for example to view user profile:\r\n\r\n```javascript\r\nroutes: {\r\n  // each request method may have it's own routes\r\n  get: [\r\n    ['user/:user_id', 'users/profile']\r\n  ]\r\n\r\n  // also you can set routes for all methods\r\n  all: [\r\n    // if routes will not match for requested method then will try this routes\r\n  ]\r\n}\r\n```\r\n\r\nor you may set request method as route prefix:\r\n\r\n\r\n```javascript\r\nroutes: [\r\n  ['get user/:user_id', 'users/profile'], // will route this for get method\r\n  ['* user/:user_id', 'users/profile'] // all methods\r\n  ['user/:user_id', 'users/profile'] // if not set then will check all methods\r\n]\r\n```\r\n\r\n\r\nThis will set `controller=users` and `action=profile` and user_id will be available as `Request.params.user_id`.\r\n\r\nOr you may pass this request to mvc module:\r\n\r\n```javascript\r\nroutes: {\r\n  get: [\r\n    ['user/:user_id', '#auth/users/profile']\r\n  ]\r\n}\r\n```\r\n\r\nThe `#` symbol meen that this request will pass to `auth` module, `controller=users` and `action=profile`.\r\n\r\nYou could also set format for user_id like so:\r\n\r\n```javascript\r\nroutes: {\r\n  get: [\r\n    ['user/:user_id([0-9]+)', '#auth/users/profile']\r\n  ]\r\n}\r\n```\r\n\r\n`!important:` mvc modules may have their own routing rules.\r\n\r\nWe may also have controllers in subdirectories. Just set the directory path in square brackets.<br>\r\nFor example there is an `users` controller in `controllers/api` directory. The routing will look like:\r\n```javascript\r\nroutes: [\r\n  ['api/users/*', '[api]/users/:1'] // the slash after closing ] is optional\r\n]\r\n```\r\n\r\nRESTful routes:\r\n```javascript\r\n  routes: [\r\n    ['get api/:resource',          '[api]:resource/index'],\r\n    ['get api/:resource/new',      '[api]:resource/new'],\r\n    ['post api/:resource',         '[api]:resource/create'],\r\n    ['get api/:resource/:id',      '[api]:resource/show'],\r\n    ['get api/:resource/:id/edit', '[api]:resource/edit'],\r\n    ['put api/:resource/:id',      '[api]:resource/update'],\r\n    ['delete api/:resource/:id',   '[api]:resource/remove']\r\n  ]\r\n```\r\nThis means in `api` directory you could have a controller for each resource with methods `index`, `new`, `create`, `show`, `edit`, `update` and `remove`.<br>\r\nIf you use such HTTP methods as `put` or `delete` you must have some middleware which will rewrite the method. You could install [methodOverride](https://github.com/Shogun147/Katana-methodOverride) module with `katana module install methodOverride` command in your app root. Don't forget to enable it with `katana module enable methodOverride`.<br>\r\nOn the client side, set desired method in hidden field with `_method` name:\r\n```html\r\n<form action=\"/api\" method=\"post\">\r\n  <input type=\"hidden\" name=\"_method\" value=\"put\">\r\n</form>\r\n```\r\nField name could be changed in the main module file.\r\n\r\nMore examples:\r\n  \r\n```javascript\r\n['news/:category/rss.:format(xml|json)?', 'news/rss'] will allow:\r\n news/any_category/rss\r\n news/any_category/rss.xml\r\n news/any_category/rss.json\r\n\r\n and News controller:\r\n\r\n methods: {\r\n   rss: function(Response, Request) {\r\n     // Now we can use Request.params.category and Request.params.format\r\n     var format = Request.params.format || 'xml'; // default xml\r\n\r\n     ...\r\n   }\r\n }\r\n```\r\n\r\n\r\n## Modules\r\n\r\nIn Katana modules can be used as mvc part or your application or as middleware.\r\n\r\nFor mvc modules you can use routing the same way as for main mvc.<br>\r\nAlso you can run them as widgets by calling run method: \r\n\r\n```javascript\r\nModule('auth').run('users/list');\r\n```\r\n\r\nThis will run `list` action of `users` controller from `auth` module.\r\n\r\nMiddleware modules can listen specific application events and interact as they need.\r\n\r\nFor example auth module can look like this:\r\n\r\n```javascript\r\nvar User = App.Model('auth:user'); // get user model of auth module\r\n\r\n// listen new request event\r\nApp.on('request', function(Request, Response, callback) {\r\n  Request.user = new User(Request.session);\r\n\r\n  callback(); // callback when we're done here, required for application to continue\r\n});\r\n```\r\n\r\nand then in our controller we can access user object as `Request.user`.\r\n\r\n### Sharing modules\r\n\r\n[Katana](https://github.com/Shogun147/Katana) comes with an basic modules sharing system which allow to download public modules and install them for application.\r\n\r\nKatana binary has few new commands for interacting with modules:\r\n\r\n* `katana modules` - list all available modules.\r\n* `katana module search <str>` - search modules that contain `str` in name or description.\r\n* `katana module update` - update modules list and their info.\r\n* `katana module install <name> [url]` - install or reinstall app module.\r\n  * `name` or `name@version` - module name\r\n  * `url` or `username:repository` or `username:repository@version` - optional url or github username:repository combination.\r\n\r\n  If only `name` is provided then download url will be builded from module data contained in modules registry file. The name could also be followed by an version tag.<br>\r\n  If second argument is an url then module will be downloaded from that url.<br>\r\n  If second argument is an combination of `username:repository@version` then the url will be: `https://github.com/:username/:repository/tarball/:version`.<br>\r\n  If no `version` provided then requested one will be last available version for module in registry. If no valid version will be detected then `master` brunch will be requested.<br>\r\n  For custom download url modules still must be gzipped tarballs.<br>\r\n  Examples of install:\r\n    * `katana module install auth`\r\n    * `katana module install auth@0.1.0`\r\n    * `katana module install Shogun147:Katana-auth`\r\n    * `katana module install Shogun147:Katana-auth@0.1.0`\r\n    * `katana module install https://github.com/Shogun147/Katana-auth/tarball/master`\r\n    * `katana module install http://my-site.com/downloads/module/v1.0.5`\r\n\r\n* `katana module uninstall <name>` - uninstall and remove module\r\n* `katana module enable <name>` - enable module\r\n* `katana module disable <name>` - disable module\r\n\r\nFor each of this actions [`install`, `uninstall`, `enable`, `disable`] modules could have their hooks which would be called. The hooks are stored in hooks directory of module.<br>\r\nThe hooks are useful when there is a need to do something unique on this actions. For ex the `install` hook (modules/:name/hooks/install.js) could create new tables in the database or copy modules assets to public directory…\r\n\r\nThe module registry is downloaded from `https://raw.github.com/Shogun147/Katana/master/modules.json`. To add new modules to the list just fork this file and send an pull request. This will make your module listed on `katana modules` command and on search.\r\n\r\n## Controllers\r\n\r\nControllers are almost most important part of any application, they handle incoming requests and send responses.\r\n\r\nA simple controller looks like this:\r\n\r\n```javascript\r\n// define our controller Class\r\nClass('Home_Controller', {\r\n  isa: App.Controller, // extend Katana Core Controller\r\n\r\n  methods: {\r\n    index: function(Response, Request) {\r\n      Response.send('Hello World!');\r\n    }\r\n  }\r\n});\r\n\r\nmodule.exports = new Home_Controller;\r\n```\r\n\r\nAnd now we can access this `index` action by opening http://katana:8000/, without any uri path this will use default controller and action from config which are `home` and `index`. Also we can access them directly by opening http://katana:8000/`home`/ with `index` as default action or http://katana:8000/`home`/`index`.\r\n\r\n### Hooks\r\n\r\nDue the power of Joose [Method Modifiers](http://joose.github.com/Joose/doc/html/Joose/Manual/MethodModifiers.html) (`before`, `after`, `override` and `around`) we may change the way class methods are called, actions that may happen before or after method call or even modify results that they could return.\r\n\r\nFor example let's restrict index method only for logged in users:\r\n\r\n```javascript\r\nClass('Home_Controller', {\r\n  isa: App.Controller,\r\n\r\n  methods: {\r\n    index: function(Response, Request) {\r\n      Response.send('Hello World!');\r\n    }\r\n  },\r\n\r\n  around: {\r\n    // the same name for the method we want to wrap\r\n    index: function(method, Response, Request) {\r\n      var User = Request.user;\r\n\r\n      // if the user is not logged in then redirect to login page\r\n      if (!User.logged_in()) {\r\n        return Request.redirect('/login');\r\n      }\r\n\r\n      // else we call original method\r\n      method(Response, Request);\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nThe `call` modifier allow as to use regular expressions and apply that hook to all methods that matches the condition.\r\n\r\nFor example let's restrict access for all methods:\r\n\r\n```javascript\r\nClass('Home_Controller', {\r\n  isa: App.Controller,\r\n\r\n  methods: {\r\n    index: function(Response, Request) {\r\n      Response.send('Hello World!');\r\n    }\r\n  },\r\n\r\n  call: {\r\n    // use regexp instead of methods name\r\n    // this will apply to all controller methods calls\r\n   '.*': function(method, Response, Request) {\r\n      var User = Request.user;\r\n\r\n      // if the user is not logged in then redirect to login page\r\n      if (!User.logged_in()) {\r\n        return Request.redirect('/login');\r\n      }\r\n\r\n      // else we call original method\r\n      method(Response, Request);\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n\r\n## Models\r\n\r\nKatana did not limit the developer to define a model in some way or to use a specific module. It just autoload all from the models directory of application or a module and store them in a local registry.\r\n\r\nYou can access them like this:<br>\r\n\r\n```javascript\r\nvar News = App.Model('news'); // get model object\r\n```\r\n\r\nTo get a model from module you need to separate module name and model path with colon `:`, for example to get `user` model of `auth` module call: `App.Model('auth:user')`.\r\n\r\nModel file can look like this:\r\n\r\n```javascript\r\nvar Mongoose = App.Store('mongoose'); // get mongoose connection, look at stores config file\r\nvar Schema = require('mongoose').Schema;\r\n\r\nvar User = new Schema({\r\n  username: String,\r\n  password: String,\r\n  email: String,\r\n  signed_at: Date,\r\n  roles: ['user', 'moderator', 'administrator']\r\n});\r\n\r\nmodule.exports = Mongoose.model('User', User);\r\n```\r\n\r\n## Views\r\n\r\nTo render a view you can use a few methods:\r\n\r\n```javascript\r\nvar View = App.View;\r\n\r\nClass('Home_Controller', {\r\n  isa: App.Controller,\r\n\r\n  methods: {\r\n    index: function(Response, Request) {\r\n      // directly render and send a view content\r\n      Response.render('index', { title: 'Hello World' }); // this will render index.html file from views\r\n\r\n      // get rendered content\r\n      var content = View.render('index', { title: 'Hello World' });\r\n      // and latter send response\r\n      Response.send(content);\r\n\r\n      // render a view from module\r\n      Users.find({}, function(error, users) {\r\n        if (error) { return Response.send('Error! Blablabla'); }\r\n\r\n        // again module name separated by colon, and then path to the view\r\n        var list = View.render('auth:list', users);\r\n\r\n        Response.render('index', { users: list });\r\n      });\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nControllers can also have their global data, which will be passed for the this.render calls:\r\n  \r\n```javascript\r\nClass('Home_Controller', {\r\n  isa: App.Controller,\r\n\r\n  have: {\r\n    // set global controller data\r\n    data: {\r\n      title: 'This is title for all pages for this controller',\r\n      total_requests: 0\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    index: function(Response) {\r\n      // you can also set global controller data from actions\r\n      this.set('copyright', 'blablabla');\r\n      // or\r\n      this.data.total_requests++;\r\n    \r\n      // by render the view with this.render method, the controller data will pass to this view\r\n      var content = this.render('index'); // <?-title?>, <?-total_requests?>\r\n    \r\n      // we may also rewrite globals by set them on render\r\n      var content = this.render('index', { title: 'This is rewritted title', foo: 'bar' });\r\n    \r\n      Response.send(content);\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n## Events\r\n\r\nKatana application emit specific events for different steps.\r\nFew of them are available for middlewares, the others are for bootstrap control flow.\r\n\r\nFor example, `auth` module can listen `request` event to assign a user model for request (see Modules).\r\n\r\nOr a `chat` module which need application server to create a socket.io server.\r\n\r\n```javascript\r\nvar socket_io = require('socket.io');\r\nvar io;\r\n\r\n// ready event is emitted when Http.Server start listening\r\nApp.on('ready', function(callback) {\r\n      io = socket_io.listen(App.server);\r\n    \r\n      io.sockets.on('connection', function (socket) {\r\n        // …\r\n      });\r\n    \r\n      callback();\r\n});\r\n```\r\n\r\n## Sessions\r\n\r\nKatana has build in module for supporting sessions.\r\nThis gives you a way to associate data with each particular visitor of your app and have that data persist between requests.\r\n\r\n### Data stores\r\nFor now Katana support only 2 session data stores (more to come):\r\n\r\n* **Memory** (by default): useful for development. Session data is saved in memory at worker-process level, which means this will not work with cluster. Also, all sessions disappear when app is restarted.\r\n\r\n* **Redis**: Sessions are saved in a redis noSQL database and persist across app restarts. Requires a Redis server or clusters.\r\n\r\n### Using sessions\r\n\r\nFirst of all you need to enable sessions in application config file.\r\nThe default session config look like this:\r\n\r\n```javascript\r\nsession: {\r\n  // enable or disable session support\r\n  enabled: true,\r\n\r\n  // session identifier name for cookie of\r\n  key_name: 'session_id',\r\n\r\n  // session id length\r\n  key_length: 32,\r\n\r\n  // lifetime before delete inactive session\r\n  lifetime: 1000 * 60 * 60 * 24 * 7,\r\n\r\n  // session store, one from config/stores.js\r\n  store: 'redis',\r\n            \r\n  // default data for new sessions\r\n  defaults: {\r\n  \r\n  }\r\n}\r\n```\r\n\r\nOnce you enable sessions, the session object will be assigned to each request and data will be loaded automatically from the session store.\r\nThen this object could be accessed as `Request.session`.\r\nFor now available public methods are `set`, `get` and `remove`.\r\n\r\nExample counter of user requests:\r\n\r\n```javascript\r\nindex: function(Response, Request) {\r\n  var Session = Request.session;\r\n\r\n  // get current requests count, default 0\r\n  var counter = Session.get('requests', 0);\r\n\r\n  counter++;\r\n\r\n  // set new value\r\n  Session.set('requests', counter);\r\n\r\n  // Session data will be automatically saved in store before sending response\r\n  // Also will save session id in the cookie with key_name from config\r\n  Response.send('You have visited this page '+ counter +' times');\r\n}\r\n```\r\n\r\n## Logging\r\n\r\nKatana uses [winston](https://github.com/flatiron/winston) module to log.\r\nAvailable as `App.Log` you could add more transports or options to it. Check official docs for this.\r\n\r\n## Examples\r\n\r\n* [ToDo](https://github.com/Shogun147/Katana-ToDo) - Simple todo application\r\n\r\n## Contributing\r\nAnyone interested or who like the framework idea can contribute by sending new ideas, issues or pull requests. Any help would be appreciated.\r\n\r\n## License\r\nThe MIT License\r\n\r\nCopyright © 2012 D.G. Shogun <Shogun147@gmail.com>\r\n","google":"Katana nodejs node.js framework router modules mvc hmvc controllers async","note":"Don't delete this file! It's used internally to help with page regeneration."}